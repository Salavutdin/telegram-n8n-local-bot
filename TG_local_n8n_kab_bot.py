import os
import asyncio
import logging
from threading import Thread
from flask import Flask, request
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ .env")

# –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã n8n –∏–∑ .env
N8N_PATH = os.getenv("N8N_WEBHOOK_PATH", "23467e56-1e59-4b55-a7d0-2ce125cc26ac")  # –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é
N8N_MODE = os.getenv("N8N_MODE", "prod")  # "test" –∏–ª–∏ "prod"
N8N_BASE_URL = os.getenv("N8N_BASE_URL", "http://localhost:5678")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º URL –≤–µ–±—Ö—É–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
if N8N_MODE == "test":
    N8N_WEBHOOK_URL = f"{N8N_BASE_URL}/webhook-test/{N8N_PATH}"
else:
    N8N_WEBHOOK_URL = f"{N8N_BASE_URL}/webhook/{N8N_PATH}"

# –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç Flask-—Å–µ—Ä–≤–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è n8n –¥–ª—è –æ—Ç–≤–µ—Ç–∞)
FLASK_PORT = 8000

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã aiogram-–±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç n8n
app = Flask(__name__)

# –ù–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# üì• –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ n8n
@dp.message(F.text)
async def handle_message(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –≤ n8n.
    """
    params = {
        "chat_id": message.chat.id,
        "text": message.text,
    }
    try:
        response = requests.get(N8N_WEBHOOK_URL, params=params)
        # await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ n8n. –û—Ç–≤–µ—Ç: {response.text}")
        await message.answer(f"–°–µ–∫—É–Ω–¥—É, –ø–µ—á–∞—Ç–∞—é...")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ n8n: {e}")

# üì§ –ü—Ä–∏—ë–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n (–∏–∑ –Ω–æ–¥—ã HTTP Request)
@app.route("/from-n8n", methods=["POST"])
def from_n8n():
    """
    –ü–æ–ª—É—á–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –æ—Ç n8n –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
    """
    data = request.get_json()
    chat_id = data.get("chat_id")
    reply = data.get("reply")

    if not chat_id or not reply:
        return {"error": "chat_id –∏ reply –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, 400

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    loop.call_soon_threadsafe(
        asyncio.create_task,
        bot.send_message(chat_id=chat_id, text=reply)
    )
    return {"status": "ok"}

# –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host="0.0.0.0", port=FLASK_PORT)

# –ó–∞–ø—É—Å–∫ aiogram-–±–æ—Ç–∞
async def run_bot():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

# üöÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    Thread(target=run_flask, daemon=True).start()
    loop.run_until_complete(run_bot())
